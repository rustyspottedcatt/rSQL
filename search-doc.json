{"searchDocs":[{"title":"About","type":0,"sectionRef":"#","url":"/rSQL/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Why choose rSQL?​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#why-choose-rsql","content":" Data management on Roblox can be cumbersome with DataStoreService and ProfileService, especially when scaling your game or creating complex data-driven mechanics. The rSQL module aims to bridge this gap by introducing familiar SQL-like commands and workflows.  ","version":"Next","tagName":"h2"},{"title":"Key Benefits​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#key-benefits","content":" Simplifies Development: Provides SQL-like commands that reduce the complexity of working directly with Roblox services.Asynchronous Workflow: Makes use of promises to handle asynchronous operations, reducing callback hell and improving error management.Customizable Configuration: Fully configurable options for controlling SQL operations, like allowing or disallowing specific commands (e.g., CREATE, DROP, INSERT).Error Handling: Provides detailed error messages with tracebacks to simplify debugging.Type-Safe Operations: Built with strict typing to ensure safer and more predictable operations, making it ideal for large, collaborative projects.    ","version":"Next","tagName":"h3"},{"title":"Features Overview​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#features-overview","content":" ","version":"Next","tagName":"h2"},{"title":"SQL-like Operations​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#sql-like-operations","content":" With rSQL, you can perform:  Data Manipulation: INSERT, SELECT, UPDATE, and DELETE.Schema Management: CREATE, DROP, and TRUNCATE tables.Advanced Queries: Parse and execute SQL-like strings with conditions and clauses.  ","version":"Next","tagName":"h3"},{"title":"DataStore and ProfileService Integration​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#datastore-and-profileservice-integration","content":" Seamless support for both DataStoreService and ProfileService.Abstracts away the boilerplate code required for data persistence and retrieval.  ","version":"Next","tagName":"h3"},{"title":"Promises for Async Operations​","type":1,"pageTitle":"About","url":"/rSQL/docs/intro#promises-for-async-operations","content":" All methods return promises, enabling clean and readable asynchronous workflows:  local rSQL = require(script.rSQL) rSQL.connect(datastore, config) :andThen(function(connection) print(&quot;Connected successfully!&quot;) return connection:query(&quot;INSERT INTO Players (Name, Score) VALUES ('Player1', 100)&quot;) end) :catch(function(err) warn(&quot;Error: &quot; .. err) end)  ","version":"Next","tagName":"h3"},{"title":"Functions","type":0,"sectionRef":"#","url":"/rSQL/docs/functions","content":"","keywords":"","version":"Next"},{"title":"connect​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#connect","content":" Establishes a connection to the DataStore with the provided configuration.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#syntax","content":" rSQL.connect(self: Types.DatastoreSQL, datastore: Types.DataStore, config: Types.DatastoreSQLConfig): Types.TypedPromise&lt;Types.DatastoreSQLConnection&gt;   ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#parameters","content":" datastore (Types.DataStore): The DataStore instance to connect to.config (Types.DatastoreSQLConfig): Configuration settings for the SQL module.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#returns","content":" Types.TypedPromise&lt;Types.DatastoreSQLConnection&gt;: A promise that resolves to a SQL connection object.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#example","content":" local DataStoreService = game:GetService(&quot;DataStoreService&quot;) local datastore = DataStoreService:GetDataStore(&quot;ExampleStore&quot;) rSQL.connect(datastore, config):andThen(function(connection) print(&quot;Connected successfully to DataStore!&quot;) _G.dbConnection = connection end):catch(function(err) warn(&quot;Connection failed: &quot; .. err) end)     ","version":"Next","tagName":"h3"},{"title":"connectToProfileService​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#connecttoprofileservice","content":" Establishes a connection to the Profile Service with the provided configuration.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#syntax-1","content":" rSQL.connectToProfileService(self: Types.DatastoreSQL, profilesTable: table, config: Types.DatastoreSQLConfig): Types.TypedPromise&lt;Types.ProfileSQLConnection&gt;   ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#parameters-1","content":" profilesTable (table): The table containing profile data.config (Types.DatastoreSQLConfig): Configuration settings for the SQL module.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#returns-1","content":" Types.TypedPromise&lt;Types.ProfileSQLConnection&gt;: A promise that resolves to a Profile SQL connection object.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#example-1","content":" local profilesTable = {} rSQL.connectToProfileService(profilesTable, config):andThen(function(connection) print(&quot;Connected to Profile Service!&quot;) _G.profileConnection = connection end):catch(function(err) warn(&quot;Connection failed: &quot; .. err) end)     ","version":"Next","tagName":"h3"},{"title":"query​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#query","content":" Executes an SQL query on the connected DataStore or ProfileService.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#syntax-2","content":" connection:query(query: Types.SQLQuery): Types.TypedPromise&lt;Types.SQLQueryResult&gt;   ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#parameters-2","content":" query (Types.SQLQuery): The SQL query string to execute.  ","version":"Next","tagName":"h3"},{"title":"Returns​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#returns-2","content":" Types.TypedPromise&lt;Types.SQLQueryResult&gt;: A promise resolving to the query result.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Functions","url":"/rSQL/docs/functions#example-2","content":" local sqlQuery = &quot;SELECT * FROM Players WHERE Score &gt; 50&quot; _G.dbConnection:query(sqlQuery):andThen(function(results) for _, player in ipairs(results) do print(player.Name, player.Score) end end):catch(function(err) warn(&quot;Query failed: &quot; .. err) end)  ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/rSQL/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#prerequisites","content":" Dependencies: Ensure the following libraries are included in your Roblox project: Promise – A robust promise implementation for Lua.Signal – A library for creating event-driven workflows. DataStoreService Permissions: Enable Studio Access to API Services in Roblox Studio settings to allow DataStore usage during testing.    ","version":"Next","tagName":"h3"},{"title":"Step 1: Installation​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#step-1-installation","content":" Clone or download the rSQL module along with its dependencies into your project. Organize the module in the following structure: Packages/ ├── rSQL/ │ ├── init.luau │ ├── lib/ │ │ ├── types.luau │ ├── components/ │ │ ├── DatastoreSQL.luau │ │ ├── ProfileSQL.luau Reference the module in your scripts: local rSQL = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.rSQL)     ","version":"Next","tagName":"h3"},{"title":"Step 2: Configuration​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#step-2-configuration","content":" Define a configuration table to control the behavior of the rSQL module. Below is an example configuration:  local config = { allowOverwrite = true, allowInsert = true, allowSelect = true, allowUpdate = true, allowDelete = true, allowCreate = true, allowDrop = false, allowTruncate = false, allowAlter = false, allowTransaction = false, }     ","version":"Next","tagName":"h3"},{"title":"Step 3: Connecting to DataStore​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#step-3-connecting-to-datastore","content":" Use the connect function to establish a connection to your DataStore:  local DataStoreService = game:GetService(&quot;DataStoreService&quot;) local datastore = DataStoreService:GetDataStore(&quot;ExampleStore&quot;) rSQL.connect(datastore, config) :andThen(function(connection) print(&quot;Connected to DataStore!&quot;) -- Save the connection for future queries _G.dbConnection = connection end) :catch(function(error) warn(&quot;Failed to connect: &quot; .. error) end)     ","version":"Next","tagName":"h3"},{"title":"Step 4: Running Queries​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#step-4-running-queries","content":" After establishing a connection, use SQL-like commands to manage your data.  Creating a Table​  _G.dbConnection:query(&quot;CREATE TABLE Players (ID, Name, Score)&quot;) :andThen(function(result) print(&quot;Table created successfully!&quot;) end) :catch(function(error) warn(&quot;Failed to create table: &quot; .. error) end)   Inserting Data​  _G.dbConnection:query(&quot;INSERT INTO Players (Name, Score) VALUES ('Player1', 100)&quot;) :andThen(function(result) print(&quot;Data inserted successfully!&quot;) end) :catch(function(error) warn(&quot;Failed to insert data: &quot; .. error) end)   Retrieving Data​  _G.dbConnection:query(&quot;SELECT * FROM Players WHERE Score &gt; 50&quot;) :andThen(function(results) for _, player in ipairs(results) do print(&quot;Player:&quot;, player.Name, &quot;Score:&quot;, player.Score) end end) :catch(function(error) warn(&quot;Failed to retrieve data: &quot; .. error) end)   Updating Data​  _G.dbConnection:query(&quot;UPDATE Players SET Score = 200 WHERE Name = 'Player1'&quot;) :andThen(function(result) print(&quot;Data updated successfully!&quot;) end) :catch(function(error) warn(&quot;Failed to update data: &quot; .. error) end)   Deleting Data​  _G.dbConnection:query(&quot;DELETE FROM Players WHERE Score &lt; 100&quot;) :andThen(function(result) print(&quot;Data deleted successfully!&quot;) end) :catch(function(error) warn(&quot;Failed to delete data: &quot; .. error) end)     ","version":"Next","tagName":"h3"},{"title":"Step 5: Connecting to ProfileService​","type":1,"pageTitle":"Getting Started","url":"/rSQL/docs/getting-started#step-5-connecting-to-profileservice","content":" If you’re managing player profiles, use the connectToProfileService method instead:  local profilesTable = {} rSQL.connectToProfileService(profilesTable, config) :andThen(function(connection) print(&quot;Connected to ProfileService!&quot;) -- Save the connection for future queries _G.profileConnection = connection end) :catch(function(error) warn(&quot;Failed to connect: &quot; .. error) end)   ProfileService queries follow the same format as DataStore queries. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}