"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[470],{7134:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"templates","title":"Templates","description":"Here are some rSQL templates to kickstart your journey!","source":"@site/docs/templates.md","sourceDirName":".","slug":"/templates","permalink":"/rSQL/docs/templates","draft":false,"unlisted":false,"editUrl":"https://github.com/rustyspottedcatt/rSQL/edit/main/docs/templates.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mySidebar","previous":{"title":"Advanced Usage","permalink":"/rSQL/docs/advanced-usage"}}');var a=t(4848),o=t(8453);const l={sidebar_position:5},s="Templates",c={},i=[{value:"Player score datastore with rSQL:",id:"player-score-datastore-with-rsql",level:2},{value:"Basic Usage",id:"basic-usage",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"templates",children:"Templates"})}),"\n",(0,a.jsxs)(r.p,{children:["Here are some ",(0,a.jsx)(r.code,{children:"rSQL"})," templates to kickstart your journey!"]}),"\n",(0,a.jsx)(r.hr,{}),"\n",(0,a.jsx)(r.h2,{id:"player-score-datastore-with-rsql",children:"Player score datastore with rSQL:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-lua",children:'local PlayerDatastore: DataStore = game:GetService("DataStoreService"):GetDataStore("PlayerDatastore")\r\nlocal Promise = require(game.ReplicatedStorage.Packages.promise)\r\nlocal rSQL = require(game.ReplicatedStorage.Packages.rSQL)\r\n\r\n-- Connect to the datastore with configuration\r\nlocal DB_CONNECTION = rSQL:connect(PlayerDatastore, {\r\n\tallowInsert = true,\r\n\tallowCreate = true,\r\n\tallowOverwrite = false,\r\n\tallowSelect = true,\r\n\tallowUpdate = true,\r\n}):expect()\r\n\r\n-- Initialize the database\r\nlocal function onInit()\r\n\treturn Promise.new(function(resolve, reject)\r\n\t\twarn("[rSQL Server] Initializing Datastore")\r\n\r\n\t\tlocal createSuccess, createError = DB_CONNECTION:query("CREATE TABLE Players (ID, Name, Score)"):expect()\r\n\r\n\t\tif createSuccess then\r\n\t\t\tresolve()\r\n\t\telse\r\n\t\t\treject(createError)\r\n\t\tend\r\n\tend)\r\nend\r\n\r\n-- Handle player joining\r\nlocal function onPlayerJoined(player: Player)\r\n\treturn Promise.new(function(resolve, reject)\r\n\t\twarn("[rSQL Server] Player joined:", player.Name)\r\n\r\n\t\tlocal playerId = player.UserId\r\n\t\tlocal query = string.format("SELECT * FROM Players WHERE ID = %d", playerId)\r\n\t\tlocal playerData = DB_CONNECTION:query(query):expect()\r\n\t\t\r\n\t\tprint(playerData)\r\n\r\n\t\tif type(playerData) == "table" and #playerData > 0 then\r\n\t\t\tplayer:SetAttribute("Score", playerData[1].Score)\r\n\t\t\tresolve(playerData[1])\r\n\t\telse\r\n\t\t\tlocal insertQuery = string.format(\r\n\t\t\t\t"INSERT INTO Players (ID, Name, Score) VALUES (%d, \'%s\', %d)",\r\n\t\t\t\tplayerId, player.Name, 0\r\n\t\t\t)\r\n\t\t\tlocal insertSuccess, insertError = DB_CONNECTION:query(insertQuery):expect()\r\n\r\n\t\t\tif insertSuccess then\r\n\t\t\t\tplayer:SetAttribute("Score", 0)\r\n\t\t\t\tresolve()\r\n\t\t\telse\r\n\t\t\t\treject(insertError)\r\n\t\t\tend\r\n\t\tend\r\n\tend)\r\nend\r\n\r\n-- Handle player leaving\r\nlocal function onPlayerLeaving(player: Player)\r\n\treturn Promise.new(function(resolve, reject)\r\n\t\tlocal playerId = player.UserId\r\n\t\tlocal playerScore = player:GetAttribute("Score")\r\n\r\n\t\tif playerScore ~= nil then\r\n\t\t\t-- Build and execute the query\r\n\t\t\tlocal updateQuery = string.format(\r\n\t\t\t\t"UPDATE Players SET Score = %d WHERE ID = %d",\r\n\t\t\t\tplayerScore, playerId\r\n\t\t\t)\r\n\t\t\tprint("[DEBUG] Update Query:", updateQuery)\r\n\r\n\t\t\tlocal updateSuccess, updateError = DB_CONNECTION:query(updateQuery):expect()\r\n\t\t\tif updateSuccess then\r\n\t\t\t\twarn(string.format("[rSQL Server] Saved data for player %s (Score: %d)", player.Name, playerScore))\r\n\t\t\t\tresolve()\r\n\t\t\telse\r\n\t\t\t\twarn(string.format(\r\n\t\t\t\t\t"[rSQL Server] Failed to save data for player %s: %s",\r\n\t\t\t\t\tplayer.Name, tostring(updateError)\r\n\t\t\t\t\t))\r\n\t\t\t\treject(updateError)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\twarn("[rSQL Server] No \'Score\' attribute found for player:", player.Name)\r\n\t\t\treject("No score attribute")\r\n\t\tend\r\n\tend)\r\nend\r\n\r\n\r\n-- Initialize and hook up events\r\nonInit():andThen(function()\r\n\twarn("[rSQL Server] Successfully initialized datastore!")\r\n\r\n\tgame.Players.PlayerAdded:Connect(function(player)\r\n\t\tonPlayerJoined(player):catch(function(err)\r\n\t\t\twarn("[rSQL Server] Error during player join:", err)\r\n\t\tend)\r\n\tend)\r\n\r\n\tfor _, player in ipairs(game.Players:GetPlayers()) do\r\n\t\tonPlayerJoined(player):catch(function(err)\r\n\t\t\twarn("[rSQL Server] Error during player join:", err)\r\n\t\tend)\r\n\tend\r\n\r\n\tgame.Players.PlayerRemoving:Connect(function(player)\r\n\t\tonPlayerLeaving(player):catch(function(err)\r\n\t\t\twarn("[rSQL Server] Error during player leave:", err)\r\n\t\tend)\r\n\tend)\r\nend):catch(function(err)\r\n\terror("[rSQL Server] Failed to initialize datastore:", err)\r\nend)\n'})}),"\n",(0,a.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-lua",children:'local PlayerDatastore: DataStore = game:GetService("DataStoreService"):GetDataStore("PlayerDatastore")\r\nlocal rSQL = require(game.ReplicatedStorage.Packages.rSQL)\r\n\r\n-- Connect to the datastore with configuration\r\nlocal DB_CONNECTION = rSQL:connect(PlayerDatastore, {\r\n    allowInsert = true,  -- Allow inserting new data\r\n    allowCreate = true,  -- Allow creating tables\r\n    allowOverwrite = false -- Prevent overwriting data to ensure safety\r\n}):expect()\r\n\r\n-- Create a Players table\r\nDB_CONNECTION:query("CREATE TABLE Players (ID, Name, Score)"):andThen(function()\r\n    print("Table \'Players\' created successfully.")\r\n\r\n    -- Insert data for a sample player, John Doe\r\n    DB_CONNECTION:query("INSERT INTO Players (ID, Name, Score) VALUES (123456789, \'John Doe\', 100)"):andThen(function()\r\n        print("Player data for \'John Doe\' inserted successfully.")\r\n\r\n        -- Fetch data for John Doe\r\n        DB_CONNECTION:query("SELECT * FROM Players WHERE ID = 123456789"):andThen(function(result)\r\n            print("Fetched data for John Doe:", result)\r\n        end):catch(function(error)\r\n            warn("Failed to fetch player data:", error)\r\n        end)\r\n    end):catch(function(error)\r\n        warn("Failed to insert player data:", error)\r\n    end)\r\nend):catch(function(error)\r\n    warn("Failed to create table:", error)\r\nend)\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>s});var n=t(6540);const a={},o=n.createContext(a);function l(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);