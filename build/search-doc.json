{"searchDocs":[{"title":"Introduction to rSQL","type":0,"sectionRef":"#","url":"/rSQL/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is rSQL?​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#what-is-rsql","content":" rSQL is a powerful SQL-inspired library for Roblox game development. It simplifies data management by offering structured queries and robust integration with Roblox DataStores. Inspired by relational databases, rSQL enables developers to perform complex data manipulations effortlessly.    ","version":"Next","tagName":"h2"},{"title":"Why Use rSQL?​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#why-use-rsql","content":" Managing game data is a challenging task, especially with large datasets or complex relationships. rSQL addresses these challenges by providing:  SQL-Like Syntax: Familiar and intuitive commands for developers.Data Persistence: Seamless integration with Roblox DataStores for storing and retrieving data.Flexibility: Support for creating, modifying, and querying virtual tables.Scalability: Designed for high performance and large datasets.Error Handling: Clear debugging tools and promise-based error management.    ","version":"Next","tagName":"h2"},{"title":"Key Features​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#key-features","content":" ","version":"Next","tagName":"h2"},{"title":"1. Virtual Tables​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#1-virtual-tables","content":" Define and manage tables as abstractions over Roblox DataStores.  ","version":"Next","tagName":"h3"},{"title":"2. SQL-Inspired Queries​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#2-sql-inspired-queries","content":" Use SQL-like commands such as SELECT, INSERT, UPDATE, and DELETE.  Example:  connection:query(&quot;SELECT Name, Score FROM Players WHERE Score &gt; 1000 ORDER BY Score DESC&quot;)   ","version":"Next","tagName":"h3"},{"title":"3. Advanced Query Capabilities​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#3-advanced-query-capabilities","content":" Support for:  Filtering (WHERE clauses)Sorting (ORDER BY)Aggregations (COUNT, SUM)  ","version":"Next","tagName":"h3"},{"title":"4. Integration with Roblox DataStores​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#4-integration-with-roblox-datastores","content":" Easily connect rSQL to Roblox's persistent storage:  rSQL:connect(DataStoreInstance, config)   ","version":"Next","tagName":"h3"},{"title":"5. Debugging and Tracing​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#5-debugging-and-tracing","content":" Enable debugging to log SQL queries and errors:  rSQL.enableDebugging(true)   ","version":"Next","tagName":"h3"},{"title":"6. Promise-Based Operations​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#6-promise-based-operations","content":" Leverage promises for asynchronous queries and seamless error handling.    ","version":"Next","tagName":"h3"},{"title":"Philosophy​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#philosophy","content":" rSQL is built on the principle of making data management as simple as possible without sacrificing flexibility or power. By abstracting complex operations, it enables developers to focus on creating engaging gameplay experiences.    ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Introduction to rSQL","url":"/rSQL/docs/intro#next-steps","content":" Dive deeper into the details:  Getting StartedBasic UsageAdvanced Usage  rSQL is here to make your data work for you! ","version":"Next","tagName":"h2"},{"title":"Getting Started with rSQL","type":0,"sectionRef":"#","url":"/rSQL/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#installation","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Download the Module​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#step-1-download-the-module","content":" Download the rSQL module from the official repository or marketplace.Place the module in your game’s ReplicatedStorage or another shared location.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Require the Module​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#step-2-require-the-module","content":" Require the rSQL module in your scripts:  local rSQL = require(game.ReplicatedStorage.Packages.rSQL)   ","version":"Next","tagName":"h3"},{"title":"Step 3: Configuration​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#step-3-configuration","content":" Define the configuration for your SQL operations. Example:  local config = { allowCreate = true, allowDrop = true, allowInsert = true, allowSelect = true, allowUpdate = true, allowDelete = true, }     ","version":"Next","tagName":"h3"},{"title":"Setting Up a Table​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#setting-up-a-table","content":" To use rSQL, you need to define and manage tables. Tables in rSQL simulate database tables.  ","version":"Next","tagName":"h2"},{"title":"Example: Creating a Table​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#example-creating-a-table","content":" local connection = rSQL:connect(testDatastore, config):expect() -- yields connection:query(&quot;CREATE TABLE Players (Id, Name, Score)&quot;)   ","version":"Next","tagName":"h3"},{"title":"Explanation:​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#explanation","content":" CREATE TABLE: Creates a new table.Players: Table name.Columns: Id, Name, and Score define the schema.    ","version":"Next","tagName":"h3"},{"title":"Basic Queries​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#basic-queries","content":" ","version":"Next","tagName":"h2"},{"title":"Inserting Data​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#inserting-data","content":" local result = connection:query(&quot;INSERT INTO Players (Id, Name, Score) VALUES (1, 'Carlos', 5000)&quot;):expect()   ","version":"Next","tagName":"h3"},{"title":"Selecting Data​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#selecting-data","content":" local result = connection:query(&quot;SELECT Name, Score FROM Players WHERE Score &gt; 1000&quot;):expect()   ","version":"Next","tagName":"h3"},{"title":"Updating Data​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#updating-data","content":" local result = connection:query(&quot;UPDATE Players SET Score = 6000 WHERE Id = 1&quot;):expect()   ","version":"Next","tagName":"h3"},{"title":"Deleting Data​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#deleting-data","content":" local result = connection:query(&quot;DELETE FROM Players WHERE Id = 1&quot;):expect()     ","version":"Next","tagName":"h3"},{"title":"Next Steps​","type":1,"pageTitle":"Getting Started with rSQL","url":"/rSQL/docs/getting-started#next-steps","content":" Once you’re comfortable with the basics, explore the following:  Basic UsageAdvanced Usage ","version":"Next","tagName":"h2"},{"title":"Advanced Usage","type":0,"sectionRef":"#","url":"/rSQL/docs/advanced-usage","content":"","keywords":"","version":"Next"},{"title":"Custom Data Manipulation​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#custom-data-manipulation","content":" Utilize rSQL to handle intricate data operations, such as selective updates and dynamic queries.  ","version":"Next","tagName":"h2"},{"title":"Example: Bulk Data Update​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#example-bulk-data-update","content":" Update player scores conditionally:  local query = &quot;UPDATE Players SET Score = Score + 100 WHERE Score &lt; 5000&quot; connection:query(query):andThen(function(result) print(&quot;Scores updated successfully.&quot;) end):catch(function(err) warn(&quot;Failed to update scores:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Error Handling with Promises​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#error-handling-with-promises","content":" Handle errors effectively using Promise-based patterns. This ensures you can catch and address issues promptly.  ","version":"Next","tagName":"h2"},{"title":"Example: Query Execution with Error Handling​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#example-query-execution-with-error-handling","content":" connection:query(&quot;SELECT * FROM Players WHERE Age &lt; 18&quot;) :andThen(function(results) for _, player in ipairs(results) do print(player.Name, player.Age) end end) :catch(function(err) warn(&quot;Query failed:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Integrating with Profile Service​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#integrating-with-profile-service","content":" rSQL can interface with the Profile Service to handle player data seamlessly.  ","version":"Next","tagName":"h2"},{"title":"Example: Creating and Using Profiles​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#example-creating-and-using-profiles","content":" local profilesTable = {} -- Simulated profile data local config = { allowCreate = true, allowInsert = true, allowSelect = true, allowUpdate = true, } rSQL:connectToProfileService(profilesTable, config):andThen(function(connection) print(&quot;Connected to Profile Service.&quot;) -- Create a table for profiles connection:query(&quot;CREATE TABLE PlayerProfiles (Id INTEGER PRIMARY KEY, Name TEXT, Age INTEGER)&quot;) -- Insert a new profile connection:query(&quot;INSERT INTO PlayerProfiles (Id, Name, Age) VALUES (1, 'Carlos', 25)&quot;) -- Query profiles connection:query(&quot;SELECT * FROM PlayerProfiles&quot;) :andThen(function(results) for _, profile in ipairs(results) do print(profile.Name, profile.Age) end end) :catch(function(err) warn(&quot;Failed to fetch profiles:&quot;, err) end) end):catch(function(err) warn(&quot;Failed to connect to Profile Service:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Advanced Query Composition​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#advanced-query-composition","content":" Construct dynamic queries programmatically based on runtime conditions.  ","version":"Next","tagName":"h2"},{"title":"Example: Dynamic WHERE Clause​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#example-dynamic-where-clause","content":" local ageLimit = 20 local query = string.format(&quot;SELECT * FROM Players WHERE Age &gt; %d&quot;, ageLimit) connection:query(query):andThen(function(results) for _, player in ipairs(results) do print(player.Name, player.Age) end end):catch(function(err) warn(&quot;Query failed:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Advanced Usage","url":"/rSQL/docs/advanced-usage#best-practices","content":" Validate Queries: Ensure your queries are correctly formatted to avoid runtime errors.Error Logging: Use catch blocks to log and debug issues.Optimize Conditions: Minimize data filtering in queries for better performance.    With these advanced techniques, you can leverage the full power of rSQL to manage complex data operations in your Roblox game! ","version":"Next","tagName":"h2"},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/rSQL/docs/basic-usage","content":"","keywords":"","version":"Next"},{"title":"Establishing a Connection​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#establishing-a-connection","content":" Before using rSQL, establish a connection to a DataStore. This connection serves as the interface for all operations.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example","content":" local DataStoreService = game:GetService(&quot;DataStoreService&quot;) local rSQL = require(game.ReplicatedStorage.Packages.rSQL) local testDatastore = DataStoreService:GetDataStore(&quot;TestDatabase&quot;) local config = { allowCreate = true, allowInsert = true, allowSelect = true, allowUpdate = true, allowDelete = true, } local connection = rSQL:connect(testDatastore, config) connection:andThen(function() print(&quot;Connection established!&quot;) end):catch(function(err) warn(&quot;Failed to connect:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Creating a Table​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#creating-a-table","content":" Tables in rSQL define the structure of your data. Use CREATE TABLE to define schemas.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-1","content":" connection:query(&quot;CREATE TABLE Players (Id INTEGER PRIMARY KEY, Name TEXT, Score INTEGER)&quot;):andThen(function(result) print(&quot;Table created successfully!&quot;, result) end):catch(function(err) warn(&quot;Error creating table:&quot;, err) end)   ","version":"Next","tagName":"h3"},{"title":"Explanation:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#explanation","content":" CREATE TABLE: SQL command to define a new table.Columns: Define each column's name and data type (e.g., Id INTEGER, Name TEXT).    ","version":"Next","tagName":"h3"},{"title":"Inserting Data​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#inserting-data","content":" Use the INSERT INTO command to add rows to a table.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-2","content":" connection:query(&quot;INSERT INTO Players (Id, Name, Score) VALUES (1, 'Carlos', 5000)&quot;):andThen(function(result) print(&quot;Data inserted successfully!&quot;, result) end):catch(function(err) warn(&quot;Error inserting data:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Querying Data​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#querying-data","content":" Retrieve data from your tables using the SELECT command.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-3","content":" connection:query(&quot;SELECT Name, Score FROM Players WHERE Score &gt; 3000 ORDER BY Score DESC&quot;):andThen(function(results) for _, row in pairs(results) do print(row.Name, row.Score) end end):catch(function(err) warn(&quot;Error querying data:&quot;, err) end)   ","version":"Next","tagName":"h3"},{"title":"Explanation:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#explanation-1","content":" SELECT: SQL command to retrieve data.WHERE: Filter results based on conditions.ORDER BY: Sort results.    ","version":"Next","tagName":"h3"},{"title":"Updating Data​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#updating-data","content":" Modify existing rows using the UPDATE command.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-4","content":" connection:query(&quot;UPDATE Players SET Score = 6000 WHERE Id = 1&quot;):andThen(function(result) print(&quot;Data updated successfully!&quot;, result) end):catch(function(err) warn(&quot;Error updating data:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Deleting Data​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#deleting-data","content":" Remove rows from a table using the DELETE command.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-5","content":" connection:query(&quot;DELETE FROM Players WHERE Id = 1&quot;):andThen(function(result) print(&quot;Data deleted successfully!&quot;, result) end):catch(function(err) warn(&quot;Error deleting data:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Combining Operations​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#combining-operations","content":" You can chain operations to perform complex workflows.  ","version":"Next","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#example-6","content":" connection:query(&quot;CREATE TABLE Test (Id INTEGER PRIMARY KEY, Value INTEGER)&quot;) :andThen(function() return connection:query(&quot;INSERT INTO Test (Id, Value) VALUES (1, 100)&quot;) end) :andThen(function() return connection:query(&quot;SELECT * FROM Test&quot;) end) :andThen(function(results) for _, row in pairs(results) do print(row.Id, row.Value) end end) :catch(function(err) warn(&quot;Error during operations:&quot;, err) end)     ","version":"Next","tagName":"h3"},{"title":"Next Steps​","type":1,"pageTitle":"Basic Usage","url":"/rSQL/docs/basic-usage#next-steps","content":" Now that you understand the basics, proceed to explore:  Advanced Usage  rSQL offers extensive flexibility and power to manage your game's data. ","version":"Next","tagName":"h2"},{"title":"Templates","type":0,"sectionRef":"#","url":"/rSQL/docs/templates","content":"","keywords":"","version":"Next"},{"title":"Player score datastore with rSQL:​","type":1,"pageTitle":"Templates","url":"/rSQL/docs/templates#player-score-datastore-with-rsql","content":" local PlayerDatastore: DataStore = game:GetService(&quot;DataStoreService&quot;):GetDataStore(&quot;PlayerDatastore&quot;) local Promise = require(game.ReplicatedStorage.Packages.promise) local rSQL = require(game.ReplicatedStorage.Packages.rSQL) -- Connect to the datastore with configuration local DB_CONNECTION = rSQL:connect(PlayerDatastore, { allowInsert = true, allowCreate = true, allowOverwrite = false, allowSelect = true, allowUpdate = true, }):expect() -- Initialize the database local function onInit() return Promise.new(function(resolve, reject) warn(&quot;[rSQL Server] Initializing Datastore&quot;) local createSuccess, createError = DB_CONNECTION:query(&quot;CREATE TABLE Players (ID, Name, Score)&quot;):expect() if createSuccess then resolve() else reject(createError) end end) end -- Handle player joining local function onPlayerJoined(player: Player) return Promise.new(function(resolve, reject) warn(&quot;[rSQL Server] Player joined:&quot;, player.Name) local playerId = player.UserId local query = string.format(&quot;SELECT * FROM Players WHERE ID = %d&quot;, playerId) local playerData = DB_CONNECTION:query(query):expect() print(playerData) if type(playerData) == &quot;table&quot; and #playerData &gt; 0 then player:SetAttribute(&quot;Score&quot;, playerData[1].Score) resolve(playerData[1]) else local insertQuery = string.format( &quot;INSERT INTO Players (ID, Name, Score) VALUES (%d, '%s', %d)&quot;, playerId, player.Name, 0 ) local insertSuccess, insertError = DB_CONNECTION:query(insertQuery):expect() if insertSuccess then player:SetAttribute(&quot;Score&quot;, 0) resolve() else reject(insertError) end end end) end -- Handle player leaving local function onPlayerLeaving(player: Player) return Promise.new(function(resolve, reject) local playerId = player.UserId local playerScore = player:GetAttribute(&quot;Score&quot;) if playerScore ~= nil then -- Build and execute the query local updateQuery = string.format( &quot;UPDATE Players SET Score = %d WHERE ID = %d&quot;, playerScore, playerId ) print(&quot;[DEBUG] Update Query:&quot;, updateQuery) local updateSuccess, updateError = DB_CONNECTION:query(updateQuery):expect() if updateSuccess then warn(string.format(&quot;[rSQL Server] Saved data for player %s (Score: %d)&quot;, player.Name, playerScore)) resolve() else warn(string.format( &quot;[rSQL Server] Failed to save data for player %s: %s&quot;, player.Name, tostring(updateError) )) reject(updateError) end else warn(&quot;[rSQL Server] No 'Score' attribute found for player:&quot;, player.Name) reject(&quot;No score attribute&quot;) end end) end -- Initialize and hook up events onInit():andThen(function() warn(&quot;[rSQL Server] Successfully initialized datastore!&quot;) game.Players.PlayerAdded:Connect(function(player) onPlayerJoined(player):catch(function(err) warn(&quot;[rSQL Server] Error during player join:&quot;, err) end) end) for _, player in ipairs(game.Players:GetPlayers()) do onPlayerJoined(player):catch(function(err) warn(&quot;[rSQL Server] Error during player join:&quot;, err) end) end game.Players.PlayerRemoving:Connect(function(player) onPlayerLeaving(player):catch(function(err) warn(&quot;[rSQL Server] Error during player leave:&quot;, err) end) end) end):catch(function(err) error(&quot;[rSQL Server] Failed to initialize datastore:&quot;, err) end)   ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Templates","url":"/rSQL/docs/templates#basic-usage","content":" local PlayerDatastore: DataStore = game:GetService(&quot;DataStoreService&quot;):GetDataStore(&quot;PlayerDatastore&quot;) local rSQL = require(game.ReplicatedStorage.Packages.rSQL) -- Connect to the datastore with configuration local DB_CONNECTION = rSQL:connect(PlayerDatastore, { allowInsert = true, -- Allow inserting new data allowCreate = true, -- Allow creating tables allowOverwrite = false -- Prevent overwriting data to ensure safety }):expect() -- Create a Players table DB_CONNECTION:query(&quot;CREATE TABLE Players (ID, Name, Score)&quot;):andThen(function() print(&quot;Table 'Players' created successfully.&quot;) -- Insert data for a sample player, John Doe DB_CONNECTION:query(&quot;INSERT INTO Players (ID, Name, Score) VALUES (123456789, 'John Doe', 100)&quot;):andThen(function() print(&quot;Player data for 'John Doe' inserted successfully.&quot;) -- Fetch data for John Doe DB_CONNECTION:query(&quot;SELECT * FROM Players WHERE ID = 123456789&quot;):andThen(function(result) print(&quot;Fetched data for John Doe:&quot;, result) end):catch(function(error) warn(&quot;Failed to fetch player data:&quot;, error) end) end):catch(function(error) warn(&quot;Failed to insert player data:&quot;, error) end) end):catch(function(error) warn(&quot;Failed to create table:&quot;, error) end)  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}